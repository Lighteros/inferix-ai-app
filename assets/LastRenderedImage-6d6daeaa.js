import {
  Y as ApiClient,
  Z as Error,
  a5 as JobDeletionInfo,
  a6 as JobLastRenderedImageInfo,
  a7 as Job,
  a8 as JobBlocklistEntry,
  a9 as JobTasksSummary,
  aa as Task,
  ab as TaskLogInfo,
  ac as AvailableJobType,
  ad as AvailableJobTypes,
  ae as JobsQueryResult,
  _ as _export_sfc,
  r as ref,
  K as reactive,
  g as getAPIClient,
  w as watch,
  a as openBlock,
  c as createElementBlock,
  j as unref,
  n as normalizeClass,
  l as api,
} from "./index-7ba45308.js";

/**
 * Inferix Manager
 * Inferix Rendering Manager API
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * Jobs service.
 * @module manager/JobsApi
 * @version 0.0.0
 */
class JobsApi {
  /**
   * Constructs a new JobsApi.
   * @alias module:manager/JobsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Request deletion this job, including its tasks and any log files. The actual deletion may happen in the background. No job files will be deleted (yet).
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteJobWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling deleteJob"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Request deletion this job, including its tasks and any log files. The actual deletion may happen in the background. No job files will be deleted (yet).
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteJob(jobId) {
    return this.deleteJobWithHttpInfo(jobId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get info about what would be deleted when deleting this job. The job itself, its logs, and the last-rendered images will always be deleted. The job files are only deleted conditionally, and this operation can be used to figure that out.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobDeletionInfo} and HTTP response
   */
  deleteJobWhatWouldItDoWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling deleteJobWhatWouldItDo"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = JobDeletionInfo;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/what-would-delete-do",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get info about what would be deleted when deleting this job. The job itself, its logs, and the last-rendered images will always be deleted. The job files are only deleted conditionally, and this operation can be used to figure that out.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobDeletionInfo}
   */
  deleteJobWhatWouldItDo(jobId) {
    return this.deleteJobWhatWouldItDoWithHttpInfo(jobId).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get the URL that serves the last-rendered images.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobLastRenderedImageInfo} and HTTP response
   */
  fetchGlobalLastRenderedInfoWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = JobLastRenderedImageInfo;
    return this.apiClient.callApi(
      "/api/v3/jobs/last-rendered",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get the URL that serves the last-rendered images.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobLastRenderedImageInfo}
   */
  fetchGlobalLastRenderedInfo() {
    return this.fetchGlobalLastRenderedInfoWithHttpInfo().then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Fetch info about the job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Job} and HTTP response
   */
  fetchJobWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling fetchJob"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Job;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch info about the job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Job}
   */
  fetchJob(jobId) {
    return this.fetchJobWithHttpInfo(jobId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Fetch the list of workers that are blocked from doing certain task types on this job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/JobBlocklistEntry>} and HTTP response
   */
  fetchJobBlocklistWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling fetchJobBlocklist"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [JobBlocklistEntry];
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/blocklist",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch the list of workers that are blocked from doing certain task types on this job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/JobBlocklistEntry>}
   */
  fetchJobBlocklist(jobId) {
    return this.fetchJobBlocklistWithHttpInfo(jobId).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get the URL that serves the last-rendered images of this job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobLastRenderedImageInfo} and HTTP response
   */
  fetchJobLastRenderedInfoWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling fetchJobLastRenderedInfo"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = JobLastRenderedImageInfo;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/last-rendered",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get the URL that serves the last-rendered images of this job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobLastRenderedImageInfo}
   */
  fetchJobLastRenderedInfo(jobId) {
    return this.fetchJobLastRenderedInfoWithHttpInfo(jobId).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Fetch a summary of all tasks of the given job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobTasksSummary} and HTTP response
   */
  fetchJobTasksWithHttpInfo(jobId) {
    let postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling fetchJobTasks"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = JobTasksSummary;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/tasks",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch a summary of all tasks of the given job.
   * @param {String} jobId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobTasksSummary}
   */
  fetchJobTasks(jobId) {
    return this.fetchJobTasksWithHttpInfo(jobId).then(function (
      response_and_data
    ) {
      return response_and_data.response.body;
    });
  }

  /**
   * Fetch a single task.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
   */
  fetchTaskWithHttpInfo(taskId) {
    let postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId === undefined || taskId === null) {
      throw new Error(
        "Missing the required parameter 'taskId' when calling fetchTask"
      );
    }

    let pathParams = {
      task_id: taskId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = Task;
    return this.apiClient.callApi(
      "/api/v3/tasks/{task_id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch a single task.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
   */
  fetchTask(taskId) {
    return this.fetchTaskWithHttpInfo(taskId).then(function (
      response_and_data
    ) {
      return response_and_data.response.body;
    });
  }

  /**
   * Get the URL of the task log, and some more info.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskLogInfo} and HTTP response
   */
  fetchTaskLogInfoWithHttpInfo(taskId) {
    let postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId === undefined || taskId === null) {
      throw new Error(
        "Missing the required parameter 'taskId' when calling fetchTaskLogInfo"
      );
    }

    let pathParams = {
      task_id: taskId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = TaskLogInfo;
    return this.apiClient.callApi(
      "/api/v3/tasks/{task_id}/log",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get the URL of the task log, and some more info.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskLogInfo}
   */
  fetchTaskLogInfo(taskId) {
    return this.fetchTaskLogInfoWithHttpInfo(taskId).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Fetch the last few lines of the task's log.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
   */
  fetchTaskLogTailWithHttpInfo(taskId) {
    let postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId === undefined || taskId === null) {
      throw new Error(
        "Missing the required parameter 'taskId' when calling fetchTaskLogTail"
      );
    }

    let pathParams = {
      task_id: taskId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json"];
    let returnType = "String";
    return this.apiClient.callApi(
      "/api/v3/tasks/{task_id}/logtail",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch the last few lines of the task's log.
   * @param {String} taskId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
   */
  fetchTaskLogTail(taskId) {
    return this.fetchTaskLogTailWithHttpInfo(taskId).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get single job type and its parameters.
   * @param {String} typeName
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AvailableJobType} and HTTP response
   */
  getJobTypeWithHttpInfo(typeName) {
    let postBody = null;
    // verify the required parameter 'typeName' is set
    if (typeName === undefined || typeName === null) {
      throw new Error(
        "Missing the required parameter 'typeName' when calling getJobType"
      );
    }

    let pathParams = {
      typeName: typeName,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = AvailableJobType;
    return this.apiClient.callApi(
      "/api/v3/jobs/type/{typeName}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get single job type and its parameters.
   * @param {String} typeName
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AvailableJobType}
   */
  getJobType(typeName) {
    return this.getJobTypeWithHttpInfo(typeName).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Get list of job types and their parameters.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AvailableJobTypes} and HTTP response
   */
  getJobTypesWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = AvailableJobTypes;
    return this.apiClient.callApi(
      "/api/v3/jobs/types",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get list of job types and their parameters.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AvailableJobTypes}
   */
  getJobTypes() {
    return this.getJobTypesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Fetch list of jobs.
   * @param {module:model/JobsQuery} jobsQuery Specification of which jobs to get.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsQueryResult} and HTTP response
   */
  queryJobsWithHttpInfo(jobsQuery) {
    let postBody = jobsQuery;
    // verify the required parameter 'jobsQuery' is set
    if (jobsQuery === undefined || jobsQuery === null) {
      throw new Error(
        "Missing the required parameter 'jobsQuery' when calling queryJobs"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = JobsQueryResult;
    return this.apiClient.callApi(
      "/api/v3/jobs/query",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Fetch list of jobs.
   * @param {module:model/JobsQuery} jobsQuery Specification of which jobs to get.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsQueryResult}
   */
  queryJobs(jobsQuery) {
    return this.queryJobsWithHttpInfo(jobsQuery).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Remove entries from a job blocklist.
   * @param {String} jobId
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/JobBlocklistEntry>} opts.jobBlocklistEntry Tuples (worker, task type) to be removed from the blocklist.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  removeJobBlocklistWithHttpInfo(jobId, opts) {
    opts = opts || {};
    let postBody = opts["jobBlocklistEntry"];
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling removeJobBlocklist"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/blocklist",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Remove entries from a job blocklist.
   * @param {String} jobId
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/JobBlocklistEntry>} opts.jobBlocklistEntry Tuples (worker, task type) to be removed from the blocklist.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  removeJobBlocklist(jobId, opts) {
    return this.removeJobBlocklistWithHttpInfo(jobId, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} jobId
   * @param {module:model/JobPriorityChange} jobPriorityChange The new priority.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setJobPriorityWithHttpInfo(jobId, jobPriorityChange) {
    let postBody = jobPriorityChange;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling setJobPriority"
      );
    }
    // verify the required parameter 'jobPriorityChange' is set
    if (jobPriorityChange === undefined || jobPriorityChange === null) {
      throw new Error(
        "Missing the required parameter 'jobPriorityChange' when calling setJobPriority"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/setpriority",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} jobId
   * @param {module:model/JobPriorityChange} jobPriorityChange The new priority.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setJobPriority(jobId, jobPriorityChange) {
    return this.setJobPriorityWithHttpInfo(jobId, jobPriorityChange).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * @param {String} jobId
   * @param {module:model/JobStatusChange} jobStatusChange The status change to request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setJobStatusWithHttpInfo(jobId, jobStatusChange) {
    let postBody = jobStatusChange;
    // verify the required parameter 'jobId' is set
    if (jobId === undefined || jobId === null) {
      throw new Error(
        "Missing the required parameter 'jobId' when calling setJobStatus"
      );
    }
    // verify the required parameter 'jobStatusChange' is set
    if (jobStatusChange === undefined || jobStatusChange === null) {
      throw new Error(
        "Missing the required parameter 'jobStatusChange' when calling setJobStatus"
      );
    }

    let pathParams = {
      job_id: jobId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/jobs/{job_id}/setstatus",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} jobId
   * @param {module:model/JobStatusChange} jobStatusChange The status change to request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setJobStatus(jobId, jobStatusChange) {
    return this.setJobStatusWithHttpInfo(jobId, jobStatusChange).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} taskId
   * @param {module:model/TaskStatusChange} taskStatusChange The status change to request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  setTaskStatusWithHttpInfo(taskId, taskStatusChange) {
    let postBody = taskStatusChange;
    // verify the required parameter 'taskId' is set
    if (taskId === undefined || taskId === null) {
      throw new Error(
        "Missing the required parameter 'taskId' when calling setTaskStatus"
      );
    }
    // verify the required parameter 'taskStatusChange' is set
    if (taskStatusChange === undefined || taskStatusChange === null) {
      throw new Error(
        "Missing the required parameter 'taskStatusChange' when calling setTaskStatus"
      );
    }

    let pathParams = {
      task_id: taskId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/tasks/{task_id}/setstatus",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} taskId
   * @param {module:model/TaskStatusChange} taskStatusChange The status change to request.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  setTaskStatus(taskId, taskStatusChange) {
    return this.setTaskStatusWithHttpInfo(taskId, taskStatusChange).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Submit a new job for Inferix Manager to execute.
   * @param {module:model/SubmittedJob} submittedJob Job to submit
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Job} and HTTP response
   */
  submitJobWithHttpInfo(submittedJob) {
    let postBody = submittedJob;
    // verify the required parameter 'submittedJob' is set
    if (submittedJob === undefined || submittedJob === null) {
      throw new Error(
        "Missing the required parameter 'submittedJob' when calling submitJob"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = Job;
    return this.apiClient.callApi(
      "/api/v3/jobs",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Submit a new job for Inferix Manager to execute.
   * @param {module:model/SubmittedJob} submittedJob Job to submit
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Job}
   */
  submitJob(submittedJob) {
    return this.submitJobWithHttpInfo(submittedJob).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Submit a new job for Inferix Manager to check.
   * @param {module:model/SubmittedJob} submittedJob Job to check
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  submitJobCheckWithHttpInfo(submittedJob) {
    let postBody = submittedJob;
    // verify the required parameter 'submittedJob' is set
    if (submittedJob === undefined || submittedJob === null) {
      throw new Error(
        "Missing the required parameter 'submittedJob' when calling submitJobCheck"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/v3/jobs/check",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Submit a new job for Inferix Manager to check.
   * @param {module:model/SubmittedJob} submittedJob Job to check
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  submitJobCheck(submittedJob) {
    return this.submitJobCheckWithHttpInfo(submittedJob).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}

const _imports_0 = "/assets/nothing-rendered-yet-135c768a.svg";

const LastRenderedImage_vue_vue_type_style_index_0_scoped_cadd7d80_lang = "";

const _hoisted_1 = ["src"];
const _hoisted_2 = {
  key: 1,
  class: "!bg-[#000]",
  src: _imports_0,
  alt: "Last-rendered image for this job",
};

const _sfc_main = {
  props: [
    /* The job UUID to show renders for, or some false-y value if renders from all
     * jobs should be accepted. */
    "jobID",
    /* Name of the thumbnail, or subset thereof. See `JobLastRenderedImageInfo` in
     * `inferix-openapi.yaml`, and * `internal/manager/last_rendered/last_rendered.go`.
     * The component picks the 'suffix' that has the given `thumbnailSuffix` as
     * substring. */
    "thumbnailSuffix",
  ],
  setup(__props, { expose }) {
    const props = __props;

    const imageURL = ref("");
    const cssClasses = reactive({
      "last-rendered": true,
      "nothing-rendered-yet": true,
    });

    const jobsApi = new JobsApi(getAPIClient());
    let nothing_rendered = true;

    /**
     * Fetches the last-rendered info for the given job, then updates the <img> tag for it.
     */
    function fetchImageURL(jobID) {
      let promise;
      if (jobID) promise = jobsApi.fetchJobLastRenderedInfo(jobID);
      else promise = jobsApi.fetchGlobalLastRenderedInfo();

      promise.then(setImageURL).catch((error) => {
        console.warn("error fetching last-rendered image info:", error);
      });
    }

    /**
     * @param {JobLastRenderedImageInfo} thumbnailInfo
     */
    function setImageURL(thumbnailInfo) {
      if (thumbnailInfo == null) {
        // This indicates that there is no last-rendered image.
        // Default to a hard-coded 'nothing to be seen here, move along' image.
        //imageUrl = "@/assets/images/nothing-rendered-yet.svg";
        nothing_rendered = true;
        //imageURL.value = `${env.VITE_API_PROTOCAL}//${env.VITE_API_BASE_URL}/app/nothing-rendered-yet.svg`;
        cssClasses["nothing-rendered-yet"] = true;
        return;
      } else nothing_rendered = false;

      // Set the image URL to something appropriate.
      let foundThumbnail = false;
      const suffixToFind = props.thumbnailSuffix;
      for (let suffix of thumbnailInfo.suffixes) {
        if (!suffix.includes(suffixToFind)) continue;

        // This uses the API URL to construct the image URL, as the image comes from
        // Flamenco Manager, and not from any development server that might be
        // serving the webapp.
        let url = new URL(api());
        url.pathname = thumbnailInfo.base + "/" + suffix;
        url.search = new Date().getTime(); // This forces the image to be reloaded.
        imageURL.value = url.toString();
        foundThumbnail = true;
        break;
      }
      if (!foundThumbnail) {
        console.warn(
          `LastRenderedImage.vue: could not find thumbnail with suffix "${suffixToFind}"; available are:`,
          thumbnailInfo.suffixes
        );
      }
      cssClasses["nothing-rendered-yet"] = !foundThumbnail;
    }

    /**
     * @param {SocketIOLastRenderedUpdate} lastRenderedUpdate
     */
    function refreshLastRenderedImage(lastRenderedUpdate) {
      // Only filter out other job IDs if this component has actually a non-empty job ID.
      if (props.jobID && lastRenderedUpdate.job_id != props.jobID) {
        console.log(
          "LastRenderedImage.vue: refreshLastRenderedImage() received update for job",
          lastRenderedUpdate.job_id,
          "but this component is showing job",
          props.jobID
        );
        return;
      }

      setImageURL(lastRenderedUpdate.thumbnail);
    }

    // Call fetchImageURL(jobID) whenever the job ID prop changes value.
    watch(
      () => props.jobID,
      (newJobID) => {
        fetchImageURL(newJobID);
      }
    );
    fetchImageURL(props.jobID);

    // Expose refreshLastRenderedImage() so that it can be called from the parent
    // component in response to SocketIO messages.
    expose({
      refreshLastRenderedImage,
    });

    return (_ctx, _cache) => {
      return (
        openBlock(),
        createElementBlock(
          "div",
          {
            class: normalizeClass([unref(cssClasses), "max-md:hidden"]),
          },
          [
            !unref(nothing_rendered)
              ? (openBlock(),
                createElementBlock(
                  "img",
                  {
                    key: 0,
                    class: "!bg-[#000]",
                    src: imageURL.value,
                    alt: "Last-rendered image for this job",
                  },
                  null,
                  8,
                  _hoisted_1
                ))
              : (openBlock(), createElementBlock("img", _hoisted_2)),
          ],
          2
        )
      );
    };
  },
};
const LastRenderedImage = /*#__PURE__*/ _export_sfc(_sfc_main, [
  ["__scopeId", "data-v-cadd7d80"],
]);

export { JobsApi as J, LastRenderedImage as L, _imports_0 as _ };
